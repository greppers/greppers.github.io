#+TITLE: Demistifying OpenStack
#+EXPORT_FILE_NAME: 2
#+OPTIONS: toc:1 num:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_HLEVEL: 1
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: /css/reveal.css

* Introduction

OpenStack is

#+ATTR_REVEAL: :frag (appear)
- an industry standard cloud computing infrastructure software project
- a composable system for creating and managing massively scalable
  clouds
- /the/ operating system of your cloud infrastructure

** Huh?

#+ATTR_REVEAL: :frag (appear)
OpenStack is a just set of Python packages, sitting atop a Linux
distribution of your choice.

#+HTML: <img src="https://www.python.org/static/community_logos/python-logo-generic.svg" width="300" class="fragment">

** Architecture

OpenStack follows a modular architecture; it provides you with all of
the necessary tools to construct your own cloud infrastructure,
e.g. orchestration, clustering, virtualization, networking,
monitoring, alarming, cost tracking, etc.

** Just like LEGOs

#+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/2_duplo_lego_bricks.jpg" height="100">

OpenStack's individual components fit together like LEGOs, except it's
more complicated.

Every service exposes an API for programmability and integration with
other services.

** Visual representation

*** Higher-level overview

#+begin_export html
<figure>
  <img src="https://www.openstack.org/software/images/diagram/overview-diagram-new.svg"
       class="r-stretch"
       alt="OpenStack higher-level overview diagram">
  <figcaption>https://www.openstack.org/software/images/diagram/overview-diagram-new.svg</figcaption>
</figure>
#+end_export

*** Lower-level overview

#+begin_export html
<figure>
  <img src="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-assets-prod/openstack-map/openstack-map-v20221001.jpg"
       alt="OpenStack lower-level overview diagram">
  <figcaption>https://www.openstack.org/software</figcaption>
</figure>
#+end_export

* Components

Let's have a look at some of the most important services that
OpenStack features.

** Nova -- Compute

Nova is a collection of daemons which provide the means to provision
compute instances, i.e. virtual machines and baremetal servers and
containers.

*** REST API Example

Querying servers:

#+caption: GET /servers/detail
#+begin_src js
{
    "servers": [
        {
            "name": "t1",
            "OS-EXT-SRV-ATTR:host": "devstack1",
            "status": "ACTIVE",
	          ...
        },
        ...
    ]
}
#+end_src

** Neutron -- Networking

Neutron provides connectivity between interface devices, lets you
build advanced networking topologies and define sophisticated network
policies.

*** REST API Example

Returns all networks named =net0=.

#+caption: GET ${HOST}/v2.0/networks?name=net0
#+begin_src js
{
    "networks": [
        {
            "admin_state_up": true,
            "id": "396f12f8-521e-4b91-8e21-2e003500433a",
            "name": "net0",
            "provider:network_type": "vlan",
            "provider:physical_network": "physnet1",
            "provider:segmentation_id": 1002,
            "router:external": false,
            "shared": false,
            "status": "ACTIVE",
            "subnets": [],
            "tenant_id": "20bd52ff3e1b40039c312395b04683cf"
            "project_id": "20bd52ff3e1b40039c312395b04683cf"
        }
    ],
}

#+end_src

** Cinder -- Block Storage

Cinder virtualizes the management of block storage devices and
provides an API for querying and consuming these resources without
requiring any knowledge of their deployment location or any of their
underlying properties.

#+ATTR_REVEAL: :frag (appear)
- Fault-tolerance
- Recoverability
- High-availability
- Encryption

** Swift -- Object Storage

Swift is a highly-available, distributed, and consistent object/blob
store. Swift is ideal for storing unstructured data that can grow
without bound, and it's accessed through its API.

This is where your virtual machine images go!

*** REST API Examples

#+begin_example
# Create, update, or delete account metadata
POST ${HOST}/v1/{account}

# Create a new container
PUT ${HOST}/v1/{account}/{container}

# Delete an object
DELETE ${HOST}/v1/{account}/{container}/{object}
#+end_example

** Keystone

Keystone provides client authentication, service discovery, and
distributed multi-tenant authorization through a unified API.

#+ATTR_REVEAL: :frag (appear)
- Unified quotas
- Credential encryption

** Placement
** Glance

Glance lets user upload, discover and retrieve data assets meant to be
used in conjunction with other services, including *virtual machine
images* and their *metadata*.

*** REST API Example

#+caption: GET ${HOST}/v1/images/detail
#+begin_src js
{'images': [
  {'uri': 'http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9',
   'name': 'Ubuntu 10.04 Plain 5GB',
   'disk_format': 'vhd',
   'container_format': 'ovf',
   'size': '5368709120',
   'checksum': 'c2e5db72bd7fd153f53ede5da5a06de3',
   'created_at': '2010-02-03 09:34:01',
   'updated_at': '2010-02-03 09:34:01',
   'deleted_at': '',
   'status': 'active',
   'is_public': true,
   'min_ram': 256,
   'min_disk': 5,
   'owner': null,
   'properties': {'distro': 'Ubuntu 10.04 LTS'}},
  ...]}
#+end_src

** Heat

** Horizon

A web frontend which provides administrators and end users a central
interface for managing OpenStack's major services, e.g. Nova,
Keystone, Swift, and more.

*** UI

#+begin_export html
<figure>
  <img src="https://docs.openstack.org/horizon/latest/_images/dashboard_project_tab.png"
       alt="OpenStack Horizon dashboard preview">
  <figcaption>https://docs.openstack.org/horizon/latest/user/log-in.html</figcaption>
</figure>
#+end_export

* Controlling the different objects

The =openstack= command-line utility is your interface to controlling
every object in the infrastructure.

#+begin_src sh
$ openstack {backup|hypervisor|image|network|object|...}
#+end_src

* Managing multiple clouds

#+begin_src yaml
clouds:
  devstack:
    auth:
      auth_url: http://192.168.122.10:5000/
      project_name: demo
      username: demo
      password: securep4ssword
    region_name: RegionOne
  ds-admin:
    auth:
      auth_url: http://192.168.122.10:5000/
      project_name: admin
      username: admin
      password: verysaf3passw0rd
    region_name: RegionOne
#+end_src

* That's it! ðŸ¤¸

Thank you for your attention.
